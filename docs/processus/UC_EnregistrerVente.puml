@startuml
title UC_EnregistrerVente – POST /ventes

actor "Employé de magasin" as User
participant "KrakenD Gateway\n:8080" as Gateway
participant "VenteController" as Controller
participant "JwtAuthGuard" as Guard
participant "ValidationPipe" as Pipe
participant "VenteService" as Service
participant "PrismaService" as Prisma

== Requête ==
User -> Gateway: POST /ventes\nAuthorization: Bearer <JWT>\nBody: CreateVenteDto
Gateway -> Controller: /ventes (dto, headers)

== Authentification ==
Controller -> Guard: canActivate(req)
Guard -> Guard: vérifier/decoder JWT
alt Token invalide/expiré
  Guard --> Controller: throw 401 Unauthorized
  Controller --> Gateway: 401
  Gateway --> User: 401 Unauthorized
  return
else OK
  Guard --> Controller: allow
end

== Validation du body ==
Controller -> Pipe: validate(dto, whitelist=true)
alt DTO invalide
  Pipe --> Controller: throw 400 Bad Request
  Controller --> Gateway: 400
  Gateway --> User: 400 Bad Request
  return
else DTO valide
  Pipe --> Controller: dto nettoyé
end

== Traitement de la vente ==
Controller -> Service: enregistrerVente(dto)

Service -> Service: total = 0; lignes = []
loop pour chaque ligne in dto.ligne_ventes
  Service -> Prisma: produit.findUnique({ id: ligne.produit_id })
  alt Produit introuvable
    Service -> Service: throw NotFoundException
    Service --> Controller: 404 Not Found
    Controller --> Gateway: 404
    Gateway --> User: 404 Produit introuvable
    return
  else Produit trouvé
    Service -> Service: total += ligne.quantite * produit.prix\npush {produitId, quantite, prixUnitaire} dans lignes
    Service -> Prisma: stock.findFirst({ produitId: produit.id,\n magasinId: dto.magasin_id })
    alt Stock absent ou insuffisant
      Service -> Service: throw BadRequestException("Stock insuffisant")
      Service --> Controller: 400 Bad Request
      Controller --> Gateway: 400
      Gateway --> User: 400 Stock insuffisant
      return
    else Stock OK
      Service -> Prisma: stock.update({ quantite -= ligne.quantite })
    end
  end
end

== Création de la vente ==
Service -> Prisma: vente.create({\n date: now(),\n total: round2(total),\n magasinId: dto.magasin_id,\n lignes: create(lignes)\n})
Service --> Controller: { vente_id }
Controller --> Gateway: 201 Created + { vente_id }
Gateway --> User: 201 Created + { vente_id }

@enduml
