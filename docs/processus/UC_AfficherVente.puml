@startuml
title UC_AfficherVente – GET /ventes?magasinId=

actor "Employé de magasin" as User
participant "KrakenD Gateway\n:8080" as Gateway
participant "VenteController" as Controller
participant "JwtAuthGuard" as Guard
participant "VenteService" as Service
participant "PrismaService" as Prisma
database "PostgreSQL\n(vente, magasin, ligneVente, produit, stock)" as DB

== Requête ==
User -> Gateway: GET /ventes?magasinId=... \nAuthorization: Bearer <JWT>
Gateway -> Controller: /ventes?magasinId=... \nAuthorization: Bearer <JWT>

== Authentification (Guard) ==
Controller -> Guard: canActivate(req)
Guard -> Guard: vérifier header Authorization
Guard -> Guard: valider/decoder le JWT
alt Token invalide/expiré
  Guard --> Controller: throw 401 Unauthorized
  Controller --> Gateway: 401
  Gateway --> User: 401 Unauthorized
  return
else OK
  Guard --> Controller: allow
end

== Traitement ==
Controller -> Service: getVentes(magasinId?)

alt magasinId fourni
  Service -> Prisma: vente.findMany({\n where: { magasinId },\n include: { magasin, lignes: { include: { produit } } },\n orderBy: { date: 'desc' }\n})
else sans filtre
  Service -> Prisma: vente.findMany({\n include: { magasin, lignes: { include: { produit } } },\n orderBy: { date: 'desc' }\n})
end

Prisma -> DB: SELECT ventes JOIN magasin\nJOIN lignes JOIN produit ...
DB --> Prisma: rows
Prisma --> Service: ventes[]
Service -> Service: map -> [{ id, date, total,\n magasin: nom, produits: [{nom, quantite, prixUnitaire}] }]

== Réponse ==
Service --> Controller: liste de ventes (JSON)
Controller --> Gateway: 200 OK + body
Gateway --> User: 200 OK + body

@enduml
