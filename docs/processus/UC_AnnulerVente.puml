@startuml
title UC_AnnulerVente – DELETE /ventes/:id

actor "Employé de magasin" as User
participant "KrakenD Gateway\n:8080" as Gateway
participant "VenteController" as Controller
participant "JwtAuthGuard" as Guard
participant "VenteService" as Service
participant "PrismaService" as Prisma

== Requête ==
User -> Gateway: DELETE /ventes/{id}\nAuthorization: Bearer <JWT>
Gateway -> Controller: /ventes/{id}\nAuthorization: Bearer <JWT>

== Authentification ==
Controller -> Guard: canActivate(req)
Guard -> Guard: valider/decoder le JWT
alt Token invalide/expiré
  Guard --> Controller: throw 401 Unauthorized
  Controller --> Gateway: 401
  Gateway --> User: 401 Unauthorized
  return
else OK
  Guard --> Controller: allow
end

== Récupération de la vente ==
Controller -> Service: annulerVente(id)
Service -> Prisma: vente.findUnique({ include: lignes })
alt Vente introuvable
  Service -> Service: throw NotFoundException
  Service --> Controller: 404 Not Found
  Controller --> Gateway: 404
  Gateway --> User: 404 Not Found
  return
end

== Restauration du stock ==
loop pour chaque ligne de la vente
  Service -> Prisma: stock.findFirst({ produitId, magasinId })
  alt stock trouvé
    Service -> Prisma: stock.update({ quantite += ligne.quantite })
  else aucun stock trouvé
    note right
      Pas de mise à jour si le stock n'existe pas
    end note
  end
end

== Suppression des lignes et de la vente ==
Service -> Prisma: ligneVente.deleteMany({ venteId })
Service -> Prisma: vente.delete({ id })

== Réponse ==
Service --> Controller: { message: "Vente {id} annulée avec succès" }
Controller --> Gateway: 200 OK + message
Gateway --> User: 200 OK + message

@enduml
